{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst Register = require('./models/Register');\nconst bcrypt = require('bcrypt');\nconst cors = require('cors');\nconst app = express();\nconst port = 5001;\napp.use(cors({\n  origin: ['http://localhost:3000', 'http://localhost:3001'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));\napp.use(express.json());\nmongoose.connect('mongodb+srv://bhuvaneshg:deepakbhuvi@cluster0.e2m47pj.mongodb.net/HigherStudies?retryWrites=true&w=majority&appName=Cluster0', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected...')).catch(err => console.log(err));\napp.options('*', cors());\napp.post('/signup', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  console.log('Found user:', user);\n  try {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new Register({\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: 'Error registering user'\n    });\n  }\n});\napp.post('/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await Register.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(400).json({\n        error: 'User does not exist'\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        error: 'Invalid credentials'\n      });\n    }\n    res.status(200).json({\n      message: 'Login successful'\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: 'Error logging in'\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","Register","bcrypt","cors","app","port","use","origin","methods","allowedHeaders","credentials","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","options","post","req","res","email","password","body","user","hashedPassword","hash","newUser","save","status","message","error","findOne","isMatch","compare","listen"],"sources":["D:/NewGenAi/HigherStudies/src/Signup.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Register = require('./models/Register');\r\nconst bcrypt = require('bcrypt');\r\nconst cors = require('cors');\r\nconst app = express();\r\nconst port = 5001;\r\n\r\napp.use(cors({\r\n    origin: ['http://localhost:3000','http://localhost:3001'],\r\n    methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n    allowedHeaders: ['Content-Type', 'Authorization'], \r\n    credentials: true\r\n}));\r\n\r\napp.use(express.json());\r\n\r\nmongoose.connect('mongodb+srv://bhuvaneshg:deepakbhuvi@cluster0.e2m47pj.mongodb.net/HigherStudies?retryWrites=true&w=majority&appName=Cluster0', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n  .then(() => console.log('MongoDB connected...'))\r\n  .catch(err => console.log(err));\r\n\r\napp.options('*', cors());\r\napp.post('/signup', async (req, res) => {\r\n  const { email, password } = req.body;\r\n  console.log('Found user:',user);\r\n  try {\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const newUser = new Register({ email, password: hashedPassword });\r\n    await newUser.save();\r\n    res.status(201).json({ message: 'User registered successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Error registering user' });\r\n  }\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const user = await Register.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ error: 'User does not exist' });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ error: 'Invalid credentials' });\r\n    }\r\n\r\n    res.status(200).json({ message: 'Login successful' });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Error logging in' });\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}